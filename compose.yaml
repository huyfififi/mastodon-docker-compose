services:
  db:
    container_name: db
    restart: always
    image: postgres:14-alpine
    shm_size: 256mb
    networks:
      - internal_network
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
    volumes:
      - ./postgres14:/var/lib/postgresql/data
    environment:
      - 'POSTGRES_HOST_AUTH_METHOD=trust'

  redis:
    container_name: redis
    restart: always
    image: redis:7.4.2-alpine
    networks:
      - internal_network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
    volumes:
      - ./redis:/data

  web:
    image: ghcr.io/mastodon/mastodon:v4.3.4
    restart: always
    env_file: .env.production
    command: bash -c "bundle exec rake db:migrate; bundle exec puma -C config/puma.rb"
    networks:
      - external_network
      - internal_network
    healthcheck:
      test: ['CMD-SHELL',"curl -s --noproxy localhost localhost:3000/health | grep -q 'OK' || exit 1"]
    ports:
      - '127.0.0.1:3000:3000'
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  streaming:
    image: ghcr.io/mastodon/mastodon-streaming:v4.3.4
    restart: always
    env_file: .env.production
    command: node ./streaming/index.js
    networks:
      - external_network
      - internal_network
    healthcheck:
      test: ['CMD-SHELL', "curl -s --noproxy localhost localhost:4000/api/v1/streaming/health | grep -q 'OK' || exit 1"]
    ports:
      - '127.0.0.1:4000:4000'
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  sidekiq:
    container_name: sidekiq
    build: .
    image: ghcr.io/mastodon/mastodon:v4.3.4
    restart: always
    env_file: .env.production
    command: bundle exec sidekiq
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - external_network
      - internal_network
    healthcheck:
      test: ['CMD-SHELL', "ps aux | grep '[s]idekiq\ 6' || false"]

  nginx:
    restart: always
    image: nginx:1.27.4-alpine
    container_name: nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt/live/ocalaavenue.net/fullchain.pem:/etc/letsencrypt/live/ocalaavenue.net/fullchain.pem
      - /etc/letsencrypt/live/ocalaavenue.net/privkey.pem:/etc/letsencrypt/live/ocalaavenue.net/privkey.pem
    networks:
      - external_network
      - internal_network
    depends_on:
      web:
        condition: service_healthy
      streaming:
        condition: service_healthy
      sidekiq:
        condition: service_healthy


networks:
  external_network:
  internal_network:
    internal: true
